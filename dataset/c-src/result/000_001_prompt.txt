
### Task Objective:
- Analyze the provided C code to detect single-variable atomicity violations involving global shared variables in interrupt-driven programs. Focus exclusively on detecting the `<Write, Read, Write>` pattern of atomicity violations. 

### Key Considerations:
1. **Program Architecture**:
- The program consists of a main function and Interrupt Service Routines (ISRs).
- The main function executes sequentially, is not periodic, and runs only once.

2. **Interrupt Characteristics**:
- **Interrupt Priority**: Higher numerical values denote higher priority (e.g. priority 0 < priority 1 < priority 2).
- **Interrupt Nesting**: High-priority ISRs can preempt lower-priority ISRs and the main function.
- **Interrupt Timing**: Interrupt timing can occur multiple times at any point during the program's execution.

3. **Atomicity Violation Pattern `<Write, Read, Write>`**:
- The pattern consists of:
    - **a1**: A write operation on a global shared variable by a relatively lower-priority task (e.g., the main function or a lower priority ISR).
    - **a2**: A read operation on the same global shared variable by a high-priority ISR.
    - **a3**: A write operation on the same global shared variable by the same relatively lower-priority task as a1.
    **a1** and **a3** should be consecutive write operation. Two write operations are considered "consecutive" if:
        They operate on the same memory location (including the same array element).
        No other write to that specific memory location occurs between them.
        They are executed by the same relatively lower-priority tasktask (main function or ISR).
**Goal**: Detect instances where the intermediate write result (`a1`) is preempted and accessed by a high-priority read (`a2`) before being overwritten by a subsequent write (`a3`), leading to an atomicity violation. Any read operation in a higher-priority ISR between two consecutive writes in a lower-priority task constitutes an atomicity violation.

### Key Rules for Detection:
1. Inline Function Calls:
- Identify the function definition and locate the function call within the code.
- Substitute the function call with the corresponding function body.
- Ensure that any parameters passed to the function are correctly replaced with the actual arguments used in the function call.

2. **Global Shared Variables**:
- Detect violations on each global shared variable, like primitive data types, arrays, pointers or struct members accessed by both the main function and ISRs.
- The three operations in the defect must operate on the same address space, For the Atomicity Violation Pattern <a1, a2, a3>:
    For struct variables, the read/write operations in a1, a2, and a3 must point to the same struct member.
    For arrays, the read/write operations in a1, a2, and a3 must point to the same array element.
    For pointers, we need to focus on the variable pointed to by the pointer.
- Monitor every read and write operation on global shared variables and list each of their read and write operations.

3. **Compound Operations**:
-  Decompose compound operations (+=, -=, ++, *=, /=, %=, &=, |=, ^=, <<=) into their atomic read and write parts. 
    * For example, `x += 1` decomposed as:
    Read operation: `temp = x;`
    Write operation: `x = temp + 1;`

    * For example, `x++` decomposed as:
    Read operation: `temp = x;`
    Write operation: `x = temp + 1;`

- Identify potential points for atomicity violations in these decomposed operations.
- Check each compound operation for read and write vulnerabilities.
- Test all possible priority level combinations systematically, e.g., for priorities 0, 1, 2:
  * Check (0,1,0), (0,2,0), (1,2,1).

4. **Loop Analysis**:
    - When loop operations involve global shared variables, each independent read/write operation within the loop must be explicitly identified. 
    - Consider the sequence of loop variable initialization, condition check, loop body execution, and variable incrementation strictly in order. It is necessary to account for potential interruptions between each phase of the loop, as well as the possibility of interruptions spanning multiple iterations.
    - Account for interrupt interleavings during loop execution. 
    - Analyze initialization, condition checks, body execution, and updates.
    - Each loop iteration may contain atomicity violations if interrupts preempt the critical sections.
    - When analyzing conditional statements (if-else), consider all possible branches and their impact on the execution path.
    - Pay attention to how variable modifications before a conditional statement affect which branch will be executed.

### Output Format:
After thoroughly checking all Read/Write oprations on global shared variables, output a JSON report if a violation is detected:

```json
{
"violations": [
    {
    "sharedVariable": "variable_name",
    "accessPattern": ["Write", "Read", "Write"],
    "details": [
        {
        "codeSnippet": "code_snippet",
        "function": "Main or ISRx",
        "lineNumber": "Number",
        "accessType": "Write/Read",
        "priority": "priority_level"
        },
        {
        "codeSnippet": "code_snippet",
        "function": "ISRy",
        "lineNumber": "Number",
        "accessType": "Write/Read",
        "priority": "priority_level"
        },
        {
        "codeSnippet": "code_snippet",
        "function": "Main or ISRx",
        "lineNumber": "Number",
        "accessType": "Write/Read",
        "priority": "priority_level"
        }
    ],
    "triggerCount": "calculated_value"
    }
]
}

Explanation:
`sharedVariable`: The name of the shared variable involved in the violation.
`codeSnippet` provide precise locations or context of these operations for analysis.
`triggerCount` refers to the calculated number of possible triggers, considering all execution paths and scenarios such as loops or conditional branches, as well as the number of function calls.
# Example:
## Code Example:

        ```c
        1:    volatile int arr_case[100];
        2:    void main(){ // Priority: 0
        3:        arr_case[0] = 0x1; // Write operation on arr_case[0].
        4:        arr_case[0] = 0x2; // Write operation on arr_case[0].
        5:    }
        6:    void isr_1(){ // Priority: 1
        7:        unsigned char tmp = arr_case[0]; // a2: Read operation on arr_case[0].
        8:   }
        ```
        The global variables to focus on in the code:
        [arr_case[0]]

        The global variable read/write operations, line numbers, and function information are as follows:
        arr_case[0]: line 3, Write Operation, main
        arr_case[0]: line 4, Write Operation, main
        arr_case[0]: line 7, Read Operation, isr_1

        - Defect Analysis: The main function writes `0x1` to `arr_case[0]` and expects to overwrite it with `0x2`. However, before the second write occurs, `ISR1` preempts the main function and reads the intermediate value `0x1`, which leads to unintended behavior as this intermediate value should not be observable.

        - JSON Output:

            ```json
{
    "violations": [
        {
            "sharedVariable": "arr_case[0]",
            "accessPattern": ["Write", "Read", "Write"],
            "details": [
                {
                    "codeSnippet": "arr_case[0] = 0x1;",
                    "function": "main",
                    "lineNumber": "3",
                    "accessType": "Write",
                    "priority": "0"
                },
                {
                    "codeSnippet": "tmp = arr_case[0];",
                    "function": "isr_1",
                    "lineNumber": "7",
                    "accessType": "Read",
                    "priority": "1"
                },
                {
                    "codeSnippet": "arr_case[0] = 0x2;",
                    "function": "main",
                    "lineNumber": "4",
                    "accessType": "Write",
                    "priority": "0"
                }
            ],
            "triggerCount": 1
        }
    ]
}
            ```
            

Note:
- Ensure that the `accessType` strictly corresponds to the operation types in `accessPattern`. For example, the second item in `accessPattern` must be "Read", so the corresponding `accessType` in `details` must also be "Read".
- If the operation types in `details` do not match those in `accessPattern`, the pattern should be ignored or marked as invalid.

If no violations are detected, output:

```plaintext
No defects.
```

Provide all possible branch scenarios in the analysis. For each potential violation, include separate entries in the JSON output for different execution paths that could lead to the violation.
We need to analyze the provided code for atomicity violation pattern <Write, Read, Write>, in relation to the following global variables:
The code required to detect atomicity violation patterns is as follows:

    ```c
1: 
2: #include "../common.h"
3: 
4: volatile int svp_simple_001_001_global_var;
5: volatile int svp_simple_001_001_global_array[10000];
6: volatile int svp_simple_001_001_global_flag = 0;
7: 
8: #define TRIGGER 9999
9: 
10: void svp_simple_001_001_main()
11: {
12: init();
13: 
14: disable_isr(2);
15: 
16: idlerun();
17: 
18: for (int i = 0; i < 10000; i++)
19: svp_simple_001_001_global_array[i] = 0; // Write Operation on svp_simple_001_001_global_array.
20: 
21: for (int i = 0; i < 10000; i++)
22: {
23: if (i == TRIGGER)
24: svp_simple_001_001_global_array[i] = 1; // Write Operation on svp_simple_001_001_global_array.
25: }
26: }
27: 
28: void svp_simple_001_001_isr_1()
29: {
30: idlerun();
31: svp_simple_001_001_global_flag = 1;
32: 
33: svp_simple_001_001_global_var = 0; // Write Operation on svp_simple_001_001_global_var.
34: svp_simple_001_001_global_var = 1; // Write Operation on svp_simple_001_001_global_var.
35: 
36: enable_isr(2);
37: 
38: idlerun();
39: }
40: 
41: void svp_simple_001_001_isr_2()
42: {
43: int reader1, reader3;
44: if (svp_simple_001_001_global_flag == 1)
45: 
46: reader1 = svp_simple_001_001_global_array[TRIGGER]; // Read Operation on svp_simple_001_001_global_array.
47: else
48: {
49: reader1 =
50: svp_simple_001_001_global_array[0]; // Read Operation on svp_simple_001_001_global_array.
51: }
52: 
53: reader3 = svp_simple_001_001_global_array[1000]; // Read Operation on svp_simple_001_001_global_array.
54: 
55: int reader2;
56: reader2 = svp_simple_001_001_global_var; // Read Operation on svp_simple_001_001_global_var.
57: }
    ```
Global Variables to Focus on:
[svp_simple_001_001_global_array, svp_simple_001_001_global_var]

The global variable read/write operations, line numbers, and function information are as follows:
svp_simple_001_001_global_array: line 19, Write Operation, svp_simple_001_001_main
svp_simple_001_001_global_array: line 24, Write Operation, svp_simple_001_001_main
svp_simple_001_001_global_array: line 46, Read Operation, svp_simple_001_001_isr_2
svp_simple_001_001_global_array: line 50, Read Operation, svp_simple_001_001_isr_2
svp_simple_001_001_global_array: line 53, Read Operation, svp_simple_001_001_isr_2
svp_simple_001_001_global_var: line 33, Write Operation, svp_simple_001_001_isr_1
svp_simple_001_001_global_var: line 34, Write Operation, svp_simple_001_001_isr_1
svp_simple_001_001_global_var: line 56, Read Operation, svp_simple_001_001_isr_2
The above provides the read and write operations of global variables in each line (including inline function calls), but you need to consider the impact of branch statements on the execution order.
    