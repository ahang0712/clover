{
  "facts": {
    "Read_Write_Analyzer": {
      "ISR_COUNT": 2,
      "GLOBAL_VAR": [
        "svp_simple_002_001_global_array",
        "svp_simple_002_001_global_array[0]",
        "svp_simple_002_001_global_array[1]",
        "svp_simple_002_001_global_array[9999]",
        "svp_simple_002_001_global_array[TRIGGER]",
        "svp_simple_002_001_global_array[1000]",
        "svp_simple_002_001_global_array[var]",
        "svp_simple_002_001_global_array[i]",
        "svp_simple_002_001_global_array[var[0,9999]]",
        "svp_simple_002_001_global_array[i[0,9999]]",
        "casee2_global_var",
        "svp_simple_002_001_global_array[99999]"
      ],
      "MAIN_INFO": [],
      "ISR_INFO": [
        {
          "operation": "store",
          "variable": "svp_simple_002_001_global_array[9999]",
          "line": "18",
          "function": "svp_simple_002_001_isr_1"
        },
        {
          "operation": "store",
          "variable": "svp_simple_002_001_global_array[9999]",
          "line": "20",
          "function": "svp_simple_002_001_isr_1"
        },
        {
          "operation": "load",
          "variable": "svp_simple_002_001_global_array[9999]",
          "line": "22",
          "function": "svp_simple_002_001_isr_1"
        },
        {
          "operation": "load",
          "variable": "svp_simple_002_001_global_array[0]",
          "line": "24",
          "function": "svp_simple_002_001_isr_1"
        },
        {
          "operation": "store",
          "variable": "svp_simple_002_001_global_array[9999]",
          "line": "29",
          "function": "svp_simple_002_001_isr_2"
        }
      ]
    },
    "Control_flow_Analyzer": {
      "status": "failed",
      "message": "工具执行失败或输出文件不存在，已创建默认输出。",
      "code": "1: \n2: #include \"../common.h\"\n3: \n4: #define MAX_LENGTH 100000\n5: #define TRIGGER 9999\n6: \n7: volatile int svp_simple_002_001_global_array[MAX_LENGTH];\n8: volatile int casee2_global_var;\n9: \n10: void svp_simple_002_001_main() {\n11: init();\n12: idlerun();\n13: }\n14: \n15: void svp_simple_002_001_isr_1() {\n16: int mininum, maxnum;\n17: for (int i = 0; i < MAX_LENGTH; i++) {\n18: if (i == TRIGGER) svp_simple_002_001_global_array[TRIGGER] = 1;\n19: if (i == MAX_LENGTH + 1)\n20: svp_simple_002_001_global_array[TRIGGER] = 1;\n21: }\n22: mininum = svp_simple_002_001_global_array[TRIGGER] - 10;\n23: \n24: maxnum = svp_simple_002_001_global_array[0] + 10;\n25: }\n26: \n27: void svp_simple_002_001_isr_2() {\n28: idlerun();\n29: svp_simple_002_001_global_array[TRIGGER] = 999;\n30: \n31: }",
      "variable_accesses": [],
      "shared_variables": [],
      "global_variables_to_detect": [],
      "defect_patterns": [],
      "defect_vars_by_pattern": {}
    },
    "Defect_Highlight": {
      "status": "failed",
      "message": "工具执行失败或输出文件不存在，已创建默认输出。",
      "code": "1: \n2: #include \"../common.h\"\n3: \n4: #define MAX_LENGTH 100000\n5: #define TRIGGER 9999\n6: \n7: volatile int svp_simple_002_001_global_array[MAX_LENGTH];\n8: volatile int casee2_global_var;\n9: \n10: void svp_simple_002_001_main() {\n11: init();\n12: idlerun();\n13: }\n14: \n15: void svp_simple_002_001_isr_1() {\n16: int mininum, maxnum;\n17: for (int i = 0; i < MAX_LENGTH; i++) {\n18: if (i == TRIGGER) svp_simple_002_001_global_array[TRIGGER] = 1;\n19: if (i == MAX_LENGTH + 1)\n20: svp_simple_002_001_global_array[TRIGGER] = 1;\n21: }\n22: mininum = svp_simple_002_001_global_array[TRIGGER] - 10;\n23: \n24: maxnum = svp_simple_002_001_global_array[0] + 10;\n25: }\n26: \n27: void svp_simple_002_001_isr_2() {\n28: idlerun();\n29: svp_simple_002_001_global_array[TRIGGER] = 999;\n30: \n31: }",
      "variable_accesses": [],
      "shared_variables": [],
      "global_variables_to_detect": [],
      "defect_patterns": [],
      "defect_vars_by_pattern": {}
    }
  },
  "used_tools": [
    "Read_Write_Analyzer",
    "Control_flow_Analyzer",
    "Defect_Highlight"
  ],
  "actual_used_tools": [
    "Read_Write_Analyzer",
    "Control_flow_Analyzer",
    "Defect_Highlight"
  ],
  "tool_sequence": [
    "Read_Write_Analyzer",
    "Control_flow_Analyzer",
    "Defect_Highlight"
  ],
  "expert_judge_plan": [],
  "tool_plan_output": "<tool>\nRead_Write_Analyzer\nControl_flow_Analyzer\nDefect_Highlight\n</tool>",
  "tool_plan_text": "<tool>\nRead_Write_Analyzer\nControl_flow_Analyzer\nDefect_Highlight\n</tool>",
  "expert_judge_json": "{\n  \"expert_judge_tasks\": []\n}"
}