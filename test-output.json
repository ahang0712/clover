{
  "shared_variables": [
    {
      "name": "svp_simple_005_001_global_condition",
      "type": "global",
      "is_volatile": true
    },
    {
      "name": "svp_simple_005_001_global_var",
      "type": "global",
      "is_volatile": false
    }
  ],
  "variable_accesses": [
    {
      "variable": "svp_simple_005_001_global_var",
      "access_type": "store",
      "line": "17",
      "function": "svp_simple_005_001_main",
      "is_isr": false
    },
    {
      "variable": "svp_simple_005_001_global_condition",
      "access_type": "load",
      "line": "21",
      "function": "svp_simple_005_001_main",
      "is_isr": false
    },
    {
      "variable": "svp_simple_005_001_global_var",
      "access_type": "store",
      "line": "23",
      "function": "svp_simple_005_001_main",
      "is_isr": false
    },
    {
      "variable": "svp_simple_005_001_global_var",
      "access_type": "store",
      "line": "25",
      "function": "svp_simple_005_001_main",
      "is_isr": false
    },
    {
      "variable": "svp_simple_005_001_global_var",
      "access_type": "load",
      "line": "31",
      "function": "svp_simple_005_001_isr_1",
      "is_isr": true
    },
    {
      "variable": "of",
      "access_type": "number",
      "line": "ISR",
      "function": "functions:",
      "is_isr": true
    }
  ],
  "raw_output": {
    "stdout": "Variable in global_var: \nsvp_simple_005_001_global_condition \nsvp_simple_005_001_global_var \nmainInfo: \nstore svp_simple_005_001_global_var 17 svp_simple_005_001_main \nload svp_simple_005_001_global_condition 21 svp_simple_005_001_main \nstore svp_simple_005_001_global_var 23 svp_simple_005_001_main \nstore svp_simple_005_001_global_var 25 svp_simple_005_001_main \nisrInfo: \n \n \nload svp_simple_005_001_global_var 31 svp_simple_005_001_isr_1 \n\ninit 0\nllvm.dbg.declare 0\nNumber of ISR functions: 1\n",
    "stderr": "tem_count : 0\nAdded regular global var: svp_simple_005_001_global_condition\nAdded regular global var: svp_simple_005_001_global_var\nAnalyzing loops in function: svp_simple_005_001_main\nFound store to variable: svp_simple_005_001_global_var\nFound store to variable: svp_simple_005_001_global_var\nFound store to variable: svp_simple_005_001_global_var\nFound conditional branch with condition:   %5 = icmp slt i32 %4, 10000, !dbg !26\n  Comparison:   %4 = load i32, i32* %1, align 4, !dbg !24 40 i32 10000\nFound conditional branch with condition:   %9 = icmp slt i32 %8, 10000, !dbg !35\n  Comparison:   %8 = load i32, i32* %2, align 4, !dbg !33 40 i32 10000\nFound conditional branch with condition:   %12 = icmp eq i32 %11, 9999, !dbg !40\n  Comparison:   %11 = load i32, i32* %1, align 4, !dbg !37 32 i32 9999\nFound conditional branch with condition:   %15 = icmp eq i32 %14, 1000, !dbg !43\n  Comparison:   %14 = load i32, i32* %2, align 4, !dbg !42 32 i32 1000\nFound conditional branch with condition:   %27 = icmp eq i32 %26, 1, !dbg !59\n  Comparison:   %26 = load volatile i32, i32* @svp_simple_005_001_global_condition, align 4, !dbg !57 32 i32 1\nFinished analyzing loops in function: svp_simple_005_001_main\nAnalyzing loops in function: init\nFinished analyzing loops in function: init\nAnalyzing loops in function: llvm.dbg.declare\nFinished analyzing loops in function: llvm.dbg.declare\nAnalyzing loops in function: svp_simple_005_001_isr_1\nFinished analyzing loops in function: svp_simple_005_001_isr_1\nAnalyzing loops in function: idlerun\nFinished analyzing loops in function: idlerun\nCleaning global_var list, original size: 2\nFound used variable in store: svp_simple_005_001_global_var\nFound used variable in load: svp_simple_005_001_global_condition\nFound used variable in store: svp_simple_005_001_global_var\nFound used variable in store: svp_simple_005_001_global_var\nFound used variable in load: svp_simple_005_001_global_var\nUsed variables in code:\n  - TRIGGER\n  - i\n  - svp_simple_005_001_global_condition\n  - svp_simple_005_001_global_var\n  - var\nKeeping in GLOBAL_VAR: svp_simple_005_001_global_condition\nKeeping in GLOBAL_VAR: svp_simple_005_001_global_var\nCleaned global_var list, new size: 2\nPopulating global_var list with variables from main and ISR info...\nfname in findNumberInitFun : svp_simple_005_001_main\nIN init\nretFindNumberInitFun = 1\nAnalyzing loops in function: svp_simple_005_001_main\nFound store to variable: svp_simple_005_001_global_var\nFound store to variable: svp_simple_005_001_global_var\nFound store to variable: svp_simple_005_001_global_var\nFound conditional branch with condition:   %5 = icmp slt i32 %4, 10000, !dbg !26\n  Comparison:   %4 = load i32, i32* %1, align 4, !dbg !24 40 i32 10000\nFound conditional branch with condition:   %9 = icmp slt i32 %8, 10000, !dbg !35\n  Comparison:   %8 = load i32, i32* %2, align 4, !dbg !33 40 i32 10000\nFound conditional branch with condition:   %12 = icmp eq i32 %11, 9999, !dbg !40\n  Comparison:   %11 = load i32, i32* %1, align 4, !dbg !37 32 i32 9999\nFound conditional branch with condition:   %15 = icmp eq i32 %14, 1000, !dbg !43\n  Comparison:   %14 = load i32, i32* %2, align 4, !dbg !42 32 i32 1000\nFound conditional branch with condition:   %27 = icmp eq i32 %26, 1, !dbg !59\n  Comparison:   %26 = load volatile i32, i32* @svp_simple_005_001_global_condition, align 4, !dbg !57 32 i32 1\nFinished analyzing loops in function: svp_simple_005_001_main\nTracing pointer:   %1 = alloca i32, align 4\n  Unhandled value type:   %1 = alloca i32, align 4\nTracing pointer:   %1 = alloca i32, align 4\n  Unhandled value type:   %1 = alloca i32, align 4\nTracing pointer:   %2 = alloca i32, align 4\n  Unhandled value type:   %2 = alloca i32, align 4\nTracing pointer:   %2 = alloca i32, align 4\n  Unhandled value type:   %2 = alloca i32, align 4\nTracing pointer:   %1 = alloca i32, align 4\n  Unhandled value type:   %1 = alloca i32, align 4\nTracing pointer:   %2 = alloca i32, align 4\n  Unhandled value type:   %2 = alloca i32, align 4\nTracing pointer: @svp_simple_005_001_global_var = common global i32 0, align 4, !dbg !6\n  Found GlobalVariable: svp_simple_005_001_global_var\nTracing pointer:   %2 = alloca i32, align 4\n  Unhandled value type:   %2 = alloca i32, align 4\nTracing pointer:   %2 = alloca i32, align 4\n  Unhandled value type:   %2 = alloca i32, align 4\nTracing pointer:   %1 = alloca i32, align 4\n  Unhandled value type:   %1 = alloca i32, align 4\nTracing pointer:   %1 = alloca i32, align 4\n  Unhandled value type:   %1 = alloca i32, align 4\nTracing pointer: @svp_simple_005_001_global_condition = global i32 0, align 4, !dbg !0\n  Found GlobalVariable: svp_simple_005_001_global_condition\nTracing pointer: @svp_simple_005_001_global_var = common global i32 0, align 4, !dbg !6\n  Found GlobalVariable: svp_simple_005_001_global_var\nTracing pointer: @svp_simple_005_001_global_var = common global i32 0, align 4, !dbg !6\n  Found GlobalVariable: svp_simple_005_001_global_var\nAnalyzing loops in function: init\nFinished analyzing loops in function: init\nAnalyzing loops in function: llvm.dbg.declare\nFinished analyzing loops in function: llvm.dbg.declare\nAnalyzing loops in function: svp_simple_005_001_isr_1\nFinished analyzing loops in function: svp_simple_005_001_isr_1\nTracing pointer: @svp_simple_005_001_global_var = common global i32 0, align 4, !dbg !6\n  Found GlobalVariable: svp_simple_005_001_global_var\nTracing pointer:   %1 = alloca i32, align 4\n  Unhandled value type:   %1 = alloca i32, align 4\nAnalyzing loops in function: idlerun\nFinished analyzing loops in function: idlerun\nCleaning global_var list, original size: 2\nFound used variable in store: svp_simple_005_001_global_var\nFound used variable in load: svp_simple_005_001_global_condition\nFound used variable in store: svp_simple_005_001_global_var\nFound used variable in store: svp_simple_005_001_global_var\nFound used variable in load: svp_simple_005_001_global_var\nUsed variables in code:\n  - TRIGGER\n  - i\n  - svp_simple_005_001_global_condition\n  - svp_simple_005_001_global_var\n  - var\nKeeping in GLOBAL_VAR: svp_simple_005_001_global_condition\nKeeping in GLOBAL_VAR: svp_simple_005_001_global_var\nCleaned global_var list, new size: 2\n"
  },
  "isr_functions": {
    "count": 1,
    "names": [
      "svp_simple_005_001_isr_1"
    ]
  },
  "atomicity_violation_patterns": [
    {
      "pattern": "Write-Read-Write",
      "variables": [
        "svp_simple_005_001_global_var"
      ]
    }
  ]
}